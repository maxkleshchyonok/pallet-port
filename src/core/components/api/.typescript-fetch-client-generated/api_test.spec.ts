/**
 * Palletport API
 * Palletport API
 *
 * OpenAPI spec version: 1
 * Contact: foteev@gmail.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("OfferApi", () => {
  let instance: api.OfferApi
  beforeEach(function() {
    instance = new api.OfferApi(config)
  });

  test("createProductOffers", () => {
    const body: api.Offer = undefined
    return expect(instance.createProductOffers(body, {})).resolves.toBe(null)
  })
  test("deleteOfferUsingDELETE", () => {
    const offerId: string = "offerId_example"
    return expect(instance.deleteOfferUsingDELETE(offerId, {})).resolves.toBe(null)
  })
  test("findOfferByUserEmail", () => {
    const email: string = "email_example"
    return expect(instance.findOfferByUserEmail(email, {})).resolves.toBe(null)
  })
  test("findOffersByStatus", () => {
    const status: Array<OfferStatus> = undefined
    return expect(instance.findOffersByStatus(status, {})).resolves.toBe(null)
  })
  test("updateOffertWithForm", () => {
    const body: api.Offer = undefined
    const offerId: number = 789
    return expect(instance.updateOffertWithForm(body, offerId, {})).resolves.toBe(null)
  })
  test("uploadFile", () => {
    const offerId: number = 789
    const body: Object = undefined
    return expect(instance.uploadFile(offerId, body, {})).resolves.toBe(null)
  })
})

describe("OrderApi", () => {
  let instance: api.OrderApi
  beforeEach(function() {
    instance = new api.OrderApi(config)
  });

  test("deleteOrder", () => {
    const orderId: number = 789
    return expect(instance.deleteOrder(orderId, {})).resolves.toBe(null)
  })
  test("findOrdersByStatus", () => {
    const status: Array<OrderStatus> = undefined
    return expect(instance.findOrdersByStatus(status, {})).resolves.toBe(null)
  })
  test("findOrdersByUserEmail", () => {
    const email: string = "email_example"
    return expect(instance.findOrdersByUserEmail(email, {})).resolves.toBe(null)
  })
  test("getOrderById", () => {
    const orderId: number = 789
    return expect(instance.getOrderById(orderId, {})).resolves.toBe(null)
  })
  test("placeOrder", () => {
    const body: api.Order = undefined
    return expect(instance.placeOrder(body, {})).resolves.toBe(null)
  })
  test("updateOrderWithForm", () => {
    const body: api.Order = undefined
    const orderId: number = 789
    return expect(instance.updateOrderWithForm(body, orderId, {})).resolves.toBe(null)
  })
})

describe("ProductApi", () => {
  let instance: api.ProductApi
  beforeEach(function() {
    instance = new api.ProductApi(config)
  });

  test("addProduct", () => {
    const body: api.Product = undefined
    return expect(instance.addProduct(body, {})).resolves.toBe(null)
  })
  test("deleteProduct", () => {
    const productId: number = 789
    return expect(instance.deleteProduct(productId, {})).resolves.toBe(null)
  })
  test("getProductById", () => {
    const productId: number = 789
    return expect(instance.getProductById(productId, {})).resolves.toBe(null)
  })
  test("updateProductWithForm", () => {
    const body: api.Product = undefined
    const productId: number = 789
    return expect(instance.updateProductWithForm(body, productId, {})).resolves.toBe(null)
  })
})

describe("ProductCategoryApi", () => {
  let instance: api.ProductCategoryApi
  beforeEach(function() {
    instance = new api.ProductCategoryApi(config)
  });

  test("addProductCategory", () => {
    const body: api.ProductCategory = undefined
    return expect(instance.addProductCategory(body, {})).resolves.toBe(null)
  })
  test("deleteProductCategory", () => {
    const productCategoryId: number = 789
    return expect(instance.deleteProductCategory(productCategoryId, {})).resolves.toBe(null)
  })
  test("getProductCategoryById", () => {
    const productCategoryId: number = 789
    return expect(instance.getProductCategoryById(productCategoryId, {})).resolves.toBe(null)
  })
  test("updateProductCategoryWithForm", () => {
    const body: api.ProductCategory = undefined
    const productCategoryId: number = 789
    return expect(instance.updateProductCategoryWithForm(body, productCategoryId, {})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("createUser", () => {
    const body: api.User = undefined
    return expect(instance.createUser(body, {})).resolves.toBe(null)
  })
  test("deleteUser", () => {
    const userEmail: string = "userEmail_example"
    return expect(instance.deleteUser(userEmail, {})).resolves.toBe(null)
  })
  test("getUserByUserEmail", () => {
    const userEmail: string = "userEmail_example"
    return expect(instance.getUserByUserEmail(userEmail, {})).resolves.toBe(null)
  })
  test("getUsers", () => {
    return expect(instance.getUsers({})).resolves.toBe(null)
  })
  test("loginUser", () => {
    const userEmail: string = "userEmail_example"
    const password: string = "password_example"
    return expect(instance.loginUser(userEmail, password, {})).resolves.toBe(null)
  })
  test("logoutUser", () => {
    return expect(instance.logoutUser({})).resolves.toBe(null)
  })
  test("registerUser", () => {
    const userEmail: string = "userEmail_example"
    const password: string = "password_example"
    return expect(instance.registerUser(userEmail, password, {})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const body: api.User = undefined
    const userEmail: string = "userEmail_example"
    return expect(instance.updateUser(body, userEmail, {})).resolves.toBe(null)
  })
})

